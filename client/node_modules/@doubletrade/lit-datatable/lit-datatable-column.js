var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, css, html } from 'lit';
import { property, customElement } from 'lit/decorators.js';
import './helpers/ld-header-with-sort';
import './helpers/ld-header-with-filter';
import './helpers/ld-header-with-date-and-sort';
import './helpers/ld-header-with-filter-and-sort';
import './helpers/ld-header-with-choices';
let LitDatatableColumn = class LitDatatableColumn extends LitElement {
    constructor() {
        super(...arguments);
        this.property = '';
        this.otherProperties = [];
        this.html = null;
        this.eventsForDom = [];
        this.sort = '';
        this.enableFilter = false;
        this.type = undefined;
        this.language = 'en';
        this.sortEvent = null;
        this.choicesEvent = null;
        this.dateSortEvent = null;
        this.filterEvent = null;
        this.filterValue = '';
        this.choices = [];
        this.selectedChoices = [];
        this.start = '';
        this.end = '';
        this.horizontalAlign = 'left';
        this.column = false;
        this.header = false;
        this.columnStyle = '';
        this.timeoutFilterText = 0;
    }
    static get styles() {
        const mainStyle = css `
      :host {
        display: block;
      }
    `;
        return [mainStyle];
    }
    render() {
        return null;
    }
    updated(properties) {
        if (properties.has('html')) {
            this.dispatchEvent(new CustomEvent('html-changed'));
        }
        if (properties.has('type') || properties.has('sort')) {
            if (this.type === 'sort') {
                this.html = (value, p) => html `
          <ld-header-with-sort
            .language="${this.language}"
            data-property="${p}"
            @direction-changed="${this.handleSortDirectionChanged.bind(this, p)}"
            .direction="${this.getSortDirection(this.sort, p)}">
            ${value}
          </ld-header-with-sort>`;
            }
        }
        if (properties.has('type') || properties.has('filterValue')) {
            if (this.type === 'filter') {
                this.html = (value, p) => html `
          <ld-header-with-filter
            .active="${!!this.filterValue}"
            .filterValue="${this.filterValue}"
            .language="${this.language}"
            .header="${value}"
            .property="${p}"
            @filter-value-changed="${this.handleFilterTextChanged.bind(this)}">
            ${value}
          </ld-header-with-filter>`;
            }
        }
        if (properties.has('type') || properties.has('choices') || properties.has('selectedChoices')) {
            if (this.type === 'choices') {
                this.html = (value, p) => html `
          <ld-header-with-choices
            .choices="${this.choices}"
            .enableFilter=${this.enableFilter}
            .selectedChoices="${this.selectedChoices}"
            .property="${p}"
            @selected-choices-changed="${this.handleFilterChoiceChanged.bind(this)}">
            ${value}
          </ld-header-with-choices>`;
            }
        }
        if (properties.has('type') || properties.has('start') || properties.has('stop') || properties.has('sort')) {
            if (this.type === 'dateSort') {
                this.html = (value, p) => html `
          <ld-header-with-date-and-sort
            .horizontalAlign="${this.horizontalAlign}"
            dateFormat="dd/MM/yyyy"
            data-property="${p}"
            .property="${p}"
            @direction-changed="${this.handleSortDirectionChanged.bind(this, p)}"
            .direction="${this.getSortDirection(this.sort, p)}"
            .locale="${this.language}"
            .language="${this.language}"
            .active="${this.start}"
            .dateFrom="${this.start}"
            .dateTo="${this.end}"
            .header="${value}"
            @filter="${this.dateChanged.bind(this)}">
          </ld-header-with-date-and-sort>`;
            }
            else if (this.type === 'dateSortNoRange') {
                this.html = (value, p) => html `
          <ld-header-with-date-and-sort
            .horizontalAlign="${this.horizontalAlign}"
            dateFormat="dd/MM/yyyy"
            data-property="${p}"
            .property="${p}"
            @direction-changed="${this.handleSortDirectionChanged.bind(this, p)}"
            .direction="${this.getSortDirection(this.sort, p)}"
            .language="${this.language}"
            .active="${this.start}"
            .dateFrom="${this.start}"
            .dateTo="${this.end}"
            .header="${value}"
            .noRange="${true}"
            @filter="${this.dateChanged.bind(this)}">
          </ld-header-with-date-and-sort>`;
            }
        }
        if (properties.has('type') || properties.has('sort') || properties.has('filterValue')) {
            if (this.type === 'filterSort') {
                this.html = (value, p) => html `
          <ld-header-with-filter-and-sort
            .active="${!!this.filterValue}"
            .filterValue="${this.filterValue}"
            .language="${this.language}"
            data-property="${p}"
            .property="${p}"
            @direction-changed="${this.handleSortDirectionChanged.bind(this, p)}"
            .direction="${this.getSortDirection(this.sort, p)}"
            .header="${value}"
            @filter-value-changed="${this.handleFilterTextChanged.bind(this)}">
          </ld-header-with-filter-and-sort>`;
            }
        }
    }
    getSortDirection(sort, p) {
        if (sort) {
            const splittedSort = this.sort.split(',');
            if (splittedSort) {
                if (splittedSort[0] === p) {
                    return splittedSort[1];
                }
            }
        }
        return '';
    }
    handleSortDirectionChanged(p, { detail }) {
        const splittedSort = this.sort.split(',');
        if (detail.value) {
            this.sort = `${p},${detail.value}`;
            this.dispatchEvent(new CustomEvent('sort', { detail: { value: this.sort } }));
        }
        else if (splittedSort && splittedSort[0] === p) {
            this.sort = '';
            this.dispatchEvent(new CustomEvent('sort', { detail: { value: this.sort } }));
        }
    }
    handleFilterTextChanged({ detail }) {
        if (this.timeoutFilterText) {
            clearTimeout(this.timeoutFilterText);
        }
        this.timeoutFilterText = window.setTimeout(() => this.dispatchEvent(new CustomEvent('filter', { detail })), 1000);
    }
    handleFilterChoiceChanged({ detail }) {
        this.dispatchEvent(new CustomEvent('choices', { detail }));
    }
    dateChanged({ detail }) {
        this.dispatchEvent(new CustomEvent('dates', { detail }));
    }
};
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "property", void 0);
__decorate([
    property({ type: Array })
], LitDatatableColumn.prototype, "otherProperties", void 0);
__decorate([
    property({ attribute: false })
], LitDatatableColumn.prototype, "html", void 0);
__decorate([
    property({ type: Array })
], LitDatatableColumn.prototype, "eventsForDom", void 0);
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "sort", void 0);
__decorate([
    property({ type: Boolean })
], LitDatatableColumn.prototype, "enableFilter", void 0);
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "type", void 0);
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "language", void 0);
__decorate([
    property({ attribute: false })
], LitDatatableColumn.prototype, "sortEvent", void 0);
__decorate([
    property({ attribute: false })
], LitDatatableColumn.prototype, "choicesEvent", void 0);
__decorate([
    property({ attribute: false })
], LitDatatableColumn.prototype, "dateSortEvent", void 0);
__decorate([
    property({ attribute: false })
], LitDatatableColumn.prototype, "filterEvent", void 0);
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "filterValue", void 0);
__decorate([
    property({ type: Array })
], LitDatatableColumn.prototype, "choices", void 0);
__decorate([
    property({ type: Array })
], LitDatatableColumn.prototype, "selectedChoices", void 0);
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "start", void 0);
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "end", void 0);
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "horizontalAlign", void 0);
__decorate([
    property({ type: Boolean })
], LitDatatableColumn.prototype, "column", void 0);
__decorate([
    property({ type: Boolean })
], LitDatatableColumn.prototype, "header", void 0);
__decorate([
    property({ type: String })
], LitDatatableColumn.prototype, "columnStyle", void 0);
LitDatatableColumn = __decorate([
    customElement('lit-datatable-column')
], LitDatatableColumn);
export { LitDatatableColumn };
//# sourceMappingURL=lit-datatable-column.js.map