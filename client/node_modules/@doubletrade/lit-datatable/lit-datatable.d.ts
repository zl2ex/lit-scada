import { LitElement, PropertyValues } from 'lit';
import type { LitDatatableColumn } from './lit-datatable-column';
export interface Conf {
    header: string;
    property: string;
    hidden?: boolean;
}
interface EventOfTr {
    type: string;
    event: (item: any) => void;
}
interface TableElement {
    element: HTMLTableRowElement;
    columns: Array<HTMLTableCellElement>;
    events: Array<EventOfTr>;
}
export declare class LitDatatable extends LitElement {
    data: Array<unknown>;
    conf: Array<Conf>;
    table: Array<TableElement>;
    sort: string;
    headers: Array<HTMLTableHeaderCellElement>;
    stickyHeader: boolean;
    datatableColumns: Map<string, LitDatatableColumn>;
    datatableHeaders: Map<string, LitDatatableColumn>;
    lastConfSize: number;
    lastDataSize: number;
    /**
      * The property's name that is a unique key for each element in "data"
      * (e.g. "productId" or "id")
      *
     */
    key?: string;
    debounceGenerate: number;
    static get styles(): import("lit").CSSResultGroup[];
    render(): import("lit").TemplateResult<1>;
    updated(properties: PropertyValues<{
        data: Array<unknown>;
        conf: Array<Conf>;
        sort: string;
        stickyHeader: boolean;
    }>): void;
    updateSortHeaders(): void;
    firstUpdated(): void;
    deleteAllEvents(): void;
    renderCell(item: any, td: HTMLTableCellElement, confProperty: string, event?: Event, litDatatableColumn?: LitDatatableColumn): void;
    setEventListener(datatableColumn: LitDatatableColumn, lineIndex: number, renderer: EventListener): void;
    getOtherValues(datatableColumn: LitDatatableColumn, item: any): {};
    renderHtml(conf: Conf, lineIndex: number, item: any, td: HTMLTableCellElement, tr: HTMLTableRowElement): void;
    cleanEventsOfTr(item: any): void;
    createEventsOfTr(tr: HTMLTableRowElement, item: any): Array<EventOfTr>;
    cleanTrElements(): void;
    cleanTdElements(confs: Array<Conf>): void;
    updateHeaders(confs: Array<Conf>): void;
    dispatchCustomEvent(key: string, { detail }: CustomEvent): any;
    trCreated(tr: HTMLTableRowElement, lineIndex: number, item: any): void;
    trTap(item: any): void;
    trHover(item: any): void;
    trOut(item: any): void;
    createTr(lineIndex: number, item: any): HTMLTableRowElement;
    createTd(lineIndex: number): HTMLTableCellElement;
    setKeyToTr(tr: HTMLTableRowElement, item: any): HTMLTableRowElement;
    updateBody(confs: Array<Conf>): void;
    setLoading(loading: boolean): void;
    generateData(): Promise<void>;
    extractData(item: any, columnProperty: string): any;
    /**
      * Scroll to a tr with the key
      * The key property have to be set
      *
     */
    scrollOnTr(key: string): Promise<void>;
}
declare global {
    interface HTMLElementTagNameMap {
        'lit-datatable': LitDatatable;
    }
}
export {};
//# sourceMappingURL=lit-datatable.d.ts.map