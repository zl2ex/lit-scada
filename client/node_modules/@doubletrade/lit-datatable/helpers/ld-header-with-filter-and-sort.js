var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, css, html } from 'lit';
import { property, customElement } from 'lit/decorators.js';
import '@polymer/paper-input/paper-input';
import '@polymer/paper-icon-button/paper-icon-button';
import Localize from '../localize';
import './ld-header-with-sort';
let LdHeaderWithFilterAndSort = class LdHeaderWithFilterAndSort extends Localize(LitElement) {
    constructor() {
        super(...arguments);
        this.header = '';
        this.direction = '';
        this.active = false;
        this.filterValue = null;
        this.property = '';
        this.resources = {
            en: {
                search: 'Search',
                clear: 'Clear',
            },
            'en-en': {
                search: 'Search',
                clear: 'Clear',
            },
            'en-US': {
                search: 'Search',
                clear: 'Clear',
            },
            'en-us': {
                search: 'Search',
                clear: 'Clear',
            },
            fr: {
                search: 'Rechercher',
                clear: 'Effacer',
            },
            'fr-fr': {
                search: 'Rechercher',
                clear: 'Effacer',
            },
        };
    }
    static get styles() {
        const mainStyle = css `
      :host {
        display: block;
      }

      paper-input {
        min-width: var(--paper-datatable-api-min-width-input-filter, 120px);
        --paper-input-container-underline-focus: {
          display: block;
        }
        ;
        --paper-input-container-label: {
          position: initial;
        }
        ;
        --paper-input-container: {
          padding: 0;
        }
        ;
        --paper-input-container-input: {
          font-size: 12px;
        }
        ;
      }

      paper-icon-button {
        --paper-icon-button: {
          color: var(--paper-icon-button-color);
        }

        --paper-icon-button-hover: {
          color: var(--paper-icon-button-color-hover);
        }
      }

      .header {
        margin-right: 16px;
      }`;
        return [mainStyle];
    }
    render() {
        let content = html `
      <div class="header" @tap="${this.toggleActive.bind(this)}">
        ${this.header}
      </div>
      <paper-icon-button id="searchBtn" slot="actions" icon="search" @tap="${this.toggleActive.bind(this)}"></paper-icon-button>
      <paper-tooltip for="searchBtn" slot="actions">${this.localize('search')}</paper-tooltip>
    `;
        if (this.active) {
            content = html `
        <paper-input
          no-label-float
          .placeholder="${this.header}"
          .value="${this.filterValue}"
          @value-changed="${this.valueChanged.bind(this)}">
          <paper-icon-button
            id="clearBtn"
            icon="clear"
            slot="suffix"
            @tap="${this.toggleActive.bind(this)}"></paper-icon-button>
          <paper-tooltip
            for="clearBtn"
            slot="suffix">
            ${this.localize('clear')}
          </paper-tooltip>
        </paper-input>`;
        }
        return html `
      <ld-header-with-sort
        .direction="${this.direction}"
        .language="${this.language}"
        @direction-changed="${this.directionChanged.bind(this)}">
        ${content}
      </ld-header-with-sort>`;
    }
    async toggleActive() {
        this.active = !this.active;
        this.dispatchEvent(new CustomEvent('active-changed', { detail: { value: this.active } }));
        if (!this.active && this.filterValue) {
            this.filterValue = null;
            this.dispatchFilterEvent();
        }
        else {
            await this.updateComplete;
            if (this.shadowRoot) {
                const paperInput = this.shadowRoot.querySelector('paper-input');
                if (paperInput) {
                    paperInput.setAttribute('tabindex', '1');
                    paperInput.focus();
                }
            }
        }
    }
    directionChanged({ detail }) {
        if (this.direction !== detail.value) {
            this.direction = detail.value;
            this.dispatchEvent(new CustomEvent('direction-changed', { detail: { value: this.direction } }));
        }
    }
    valueChanged({ detail }) {
        if (this.filterValue !== detail.value) {
            this.filterValue = detail.value;
            this.dispatchFilterEvent();
        }
    }
    dispatchFilterEvent() {
        this.dispatchEvent(new CustomEvent('filter-value-changed', { detail: { value: this.filterValue, property: this.property } }));
    }
};
__decorate([
    property({ type: String })
], LdHeaderWithFilterAndSort.prototype, "header", void 0);
__decorate([
    property({ type: String })
], LdHeaderWithFilterAndSort.prototype, "direction", void 0);
__decorate([
    property({ type: Boolean })
], LdHeaderWithFilterAndSort.prototype, "active", void 0);
__decorate([
    property({ type: String })
], LdHeaderWithFilterAndSort.prototype, "filterValue", void 0);
__decorate([
    property({ type: String })
], LdHeaderWithFilterAndSort.prototype, "property", void 0);
LdHeaderWithFilterAndSort = __decorate([
    customElement('ld-header-with-filter-and-sort')
], LdHeaderWithFilterAndSort);
export { LdHeaderWithFilterAndSort };
//# sourceMappingURL=ld-header-with-filter-and-sort.js.map