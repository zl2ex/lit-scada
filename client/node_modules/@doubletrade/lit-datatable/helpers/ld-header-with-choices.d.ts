import { LitElement, PropertyValues, TemplateResult } from 'lit';
import '@polymer/paper-icon-button/paper-icon-button';
import '@polymer/paper-item/paper-icon-item';
import '@polymer/paper-item/paper-item-body';
import '@polymer/iron-icons/iron-icons';
import './ld-header-with-sort';
export interface Choice {
    key: string;
    label: string;
    style?: string;
    icon?: string;
    iconStyle?: string;
    prefix?: TemplateResult;
}
export declare class LdHeaderWithChoices extends LitElement {
    choices: Array<Choice>;
    enableFilter: boolean;
    filterValue: string;
    filterInput: HTMLInputElement;
    filteredChoices: Array<Choice>;
    selectedChoices: Array<string>;
    property: string;
    opened: boolean;
    dropdown: HTMLDivElement;
    static get styles(): import("lit").CSSResultGroup[];
    render(): TemplateResult<1>;
    static get properties(): {};
    constructor();
    computeIconName(choice: string, selectedChoices: Array<string>): "check-box-outline-blank" | "check-box";
    countSelected(selectedChoices: Array<string>): string;
    tapChoice(name: string): void;
    updated(properties: PropertyValues<LdHeaderWithChoices>): void;
    openDropdown(): void;
    fitToBorder(): void;
    firstUpdated(): void;
    filterValueChanged(event: InputEvent): void;
    updateFilteredChoices(): void;
}
//# sourceMappingURL=ld-header-with-choices.d.ts.map