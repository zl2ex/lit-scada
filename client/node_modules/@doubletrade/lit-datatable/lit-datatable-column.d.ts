import { LitElement, PropertyValues } from 'lit';
import './helpers/ld-header-with-sort';
import './helpers/ld-header-with-filter';
import './helpers/ld-header-with-date-and-sort';
import './helpers/ld-header-with-filter-and-sort';
import './helpers/ld-header-with-choices';
import { Language } from './localize';
import type { Choice } from './helpers/ld-header-with-choices';
declare type TypeOfColumn = 'sort' | 'filter' | 'choices' | 'dateSortNoRange' | 'dateSort' | 'filterSort';
export declare class LitDatatableColumn extends LitElement {
    property: string;
    otherProperties: Array<string>;
    html: ((value: any, otherValues?: any) => any) | null;
    eventsForDom: Array<EventListener>;
    sort: string;
    enableFilter: boolean;
    type?: TypeOfColumn;
    language: Language;
    sortEvent: EventListener | null;
    choicesEvent: EventListener | null;
    dateSortEvent: EventListener | null;
    filterEvent: EventListener | null;
    filterValue: string;
    choices: Array<Choice>;
    selectedChoices: Array<string>;
    start: string;
    end: string;
    horizontalAlign: 'left' | 'right';
    column: boolean;
    header: boolean;
    columnStyle: string;
    timeoutFilterText: number;
    static get styles(): import("lit").CSSResultGroup[];
    render(): null;
    updated(properties: PropertyValues): void;
    getSortDirection(sort: string, p: string): string;
    handleSortDirectionChanged(p: string, { detail }: CustomEvent<{
        value: string;
    }>): void;
    handleFilterTextChanged({ detail }: CustomEvent): void;
    handleFilterChoiceChanged({ detail }: CustomEvent): void;
    dateChanged({ detail }: CustomEvent): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'lit-datatable-column': LitDatatableColumn;
    }
}
export {};
//# sourceMappingURL=lit-datatable-column.d.ts.map