{"version":3,"file":"lit-datatable-integration.test.js","sourceRoot":"","sources":["lit-datatable-integration.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  fixture, html, expect, elementUpdated\n} from '@open-wc/testing';\nimport sinon from 'sinon';\nimport './component-use-lit-datatable';\nimport type { ComponentUseLitDatatable } from './component-use-lit-datatable';\nimport type { LitDatatableColumn } from '../../lit-datatable-column';\n\nclass LitDatatableIntegrationTest {\n  el!: ComponentUseLitDatatable;\n\n  async init() {\n    const litDatatable = html`\n      <component-use-lit-datatable></component-use-lit-datatable>\n    `;\n    this.el = await fixture(litDatatable);\n    return this.elementUpdated();\n  }\n\n  elementUpdated() {\n    return elementUpdated(this.el);\n  }\n\n  getDatatableColumn(type: 'header' | 'column') {\n    if (this?.el?.shadowRoot) {\n      return this.el.shadowRoot.querySelectorAll<LitDatatableColumn>(`lit-datatable-column[${type}]`);\n    }\n    return null;\n  }\n}\n\ndescribe('lit-datatable', () => {\n  it('check events on columns', async () => {\n    const litDatatableWithColumn = new LitDatatableIntegrationTest();\n    await litDatatableWithColumn.init();\n    await litDatatableWithColumn.elementUpdated();\n    const datatableColumns = litDatatableWithColumn.getDatatableColumn('column');\n\n    expect(datatableColumns).to.be.not.equal(null);\n    if (datatableColumns && datatableColumns[0]) {\n      expect(datatableColumns.length).to.be.not.equal(0);\n      expect(datatableColumns[0]).to.be.not.equal(null);\n      const htmlChangedEvent = sinon.spy();\n      datatableColumns[0].addEventListener('html-changed', htmlChangedEvent);\n      expect(htmlChangedEvent.callCount).to.be.equal(0);\n      litDatatableWithColumn.el.testString = 'newTest';\n      await litDatatableWithColumn.elementUpdated();\n      expect(htmlChangedEvent.callCount).to.be.equal(1);\n      litDatatableWithColumn.el.testString = 'test';\n      await litDatatableWithColumn.elementUpdated();\n      expect(htmlChangedEvent.callCount).to.be.equal(2);\n    }\n  });\n\n  it('check events on columns on change data', async () => {\n    const litDatatableWithColumn = new LitDatatableIntegrationTest();\n    await litDatatableWithColumn.init();\n    await litDatatableWithColumn.elementUpdated();\n    const datatableColumns = litDatatableWithColumn.getDatatableColumn('column');\n\n    expect(datatableColumns).to.be.not.equal(null);\n    if (datatableColumns && datatableColumns[0]) {\n      expect(datatableColumns.length).to.be.not.equal(0);\n      expect(datatableColumns[0]).to.be.not.equal(null);\n      const htmlChangedEvent = sinon.spy();\n      datatableColumns[0].addEventListener('html-changed', htmlChangedEvent);\n      expect(htmlChangedEvent.callCount).to.be.equal(0);\n      litDatatableWithColumn.el.data = [\n        { fruit: 'apple', color: 'green', weight: '100gr' },\n        { fruit: 'banana', color: 'yellow', weight: '140gr' },\n      ];\n      litDatatableWithColumn.el.conf = [\n        { property: 'weight', header: 'Weight', hidden: false },\n        { property: 'color', header: 'Color', hidden: false },\n        { property: 'fruit', header: 'Fruit', hidden: false },\n      ];\n      await litDatatableWithColumn.elementUpdated();\n      expect(htmlChangedEvent.callCount).to.be.equal(1);\n      litDatatableWithColumn.el.testString = 'newtest';\n      await litDatatableWithColumn.elementUpdated();\n      expect(htmlChangedEvent.callCount).to.be.equal(2);\n    }\n  });\n\n  it('check events on columns on change conf', async () => {\n    const litDatatableWithColumn = new LitDatatableIntegrationTest();\n    await litDatatableWithColumn.init();\n    await litDatatableWithColumn.elementUpdated();\n    const datatableColumns = litDatatableWithColumn.getDatatableColumn('column');\n\n    expect(datatableColumns).to.be.not.equal(null);\n    if (datatableColumns && datatableColumns[0]) {\n      expect(datatableColumns.length).to.be.not.equal(0);\n      expect(datatableColumns[0]).to.be.not.equal(null);\n      const htmlChangedEvent = sinon.spy();\n      datatableColumns[0].addEventListener('html-changed', htmlChangedEvent);\n      expect(htmlChangedEvent.callCount).to.be.equal(0);\n      litDatatableWithColumn.el.conf = [\n        { property: 'weight', header: 'Weight', hidden: false },\n        { property: 'color', header: 'Color', hidden: false },\n        { property: 'fruit', header: 'Fruit', hidden: false },\n      ];\n      await litDatatableWithColumn.elementUpdated();\n      expect(htmlChangedEvent.callCount).to.be.equal(1);\n      litDatatableWithColumn.el.testString = 'newtest';\n      await litDatatableWithColumn.elementUpdated();\n      expect(htmlChangedEvent.callCount).to.be.equal(2);\n    }\n  });\n});\n"]}