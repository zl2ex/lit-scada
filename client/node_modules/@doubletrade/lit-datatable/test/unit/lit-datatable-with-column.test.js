import { fixture, html, expect, elementUpdated } from '@open-wc/testing';
import { html as litHtml } from 'lit';
import '../../lit-datatable';
import '../../lit-datatable-column';
class LitDatatableWithColumnTest {
    async init(conf, data, columns, headers) {
        const litDatatable = html `
      <lit-datatable .conf="${conf}" .data="${data}">
        ${columns.map((column) => html `
          <lit-datatable-column
            .html="${column.html}"
            .property="${column.property}"
            .otherProperties="${column.otherProperties}"
            column
            .columnStyle="${column.columnStyle || ''}"
          ></lit-datatable-column>
        `)}
        ${headers.map((header) => html `
          <lit-datatable-column
            .html="${header.html}"
            .property="${header.property}"
            .otherProperties="${header.otherProperties}"
            header
            .columnStyle="${header.columnStyle || ''}"
          ></lit-datatable-column>
        `)}
      </lit-datatable>
    `;
        this.el = await fixture(litDatatable);
        return this.elementUpdated();
    }
    elementUpdated() {
        return elementUpdated(this.el);
    }
    get bodyTrs() {
        var _a;
        if ((_a = this === null || this === void 0 ? void 0 : this.el) === null || _a === void 0 ? void 0 : _a.shadowRoot) {
            return this.el.shadowRoot.querySelectorAll('tbody tr');
        }
        return null;
    }
    get bodyTds() {
        var _a;
        if ((_a = this === null || this === void 0 ? void 0 : this.el) === null || _a === void 0 ? void 0 : _a.shadowRoot) {
            return this.el.shadowRoot.querySelectorAll('tbody td');
        }
        return null;
    }
    get headTrs() {
        var _a;
        if ((_a = this === null || this === void 0 ? void 0 : this.el) === null || _a === void 0 ? void 0 : _a.shadowRoot) {
            return this.el.shadowRoot.querySelectorAll('thead tr');
        }
        return null;
    }
    get headThs() {
        var _a;
        if ((_a = this === null || this === void 0 ? void 0 : this.el) === null || _a === void 0 ? void 0 : _a.shadowRoot) {
            return this.el.shadowRoot.querySelectorAll('thead th');
        }
        return null;
    }
}
const basicData = [
    { fruit: 'apple', color: 'green', weight: '100gr' },
    { fruit: 'banana', color: 'yellow', weight: '140gr' },
];
const basicConf = [
    { property: 'fruit', header: 'Fruit', hidden: false },
    { property: 'color', header: 'Color', hidden: false },
    { property: 'weight', header: 'Weight', hidden: false },
];
describe('lit-datatable', () => {
    it('counts', async () => {
        const columns = [
            {
                html: (value) => litHtml `${value} test`,
                property: 'fruit',
                otherProperties: [],
            },
        ];
        const litDatatableWithColumn = new LitDatatableWithColumnTest();
        await litDatatableWithColumn.init(basicConf, basicData, columns, []);
        await litDatatableWithColumn.elementUpdated();
        const { bodyTrs, bodyTds, headTrs, headThs, } = litDatatableWithColumn;
        expect(headTrs === null || headTrs === void 0 ? void 0 : headTrs.length).to.be.equal(1);
        expect(headThs === null || headThs === void 0 ? void 0 : headThs.length).to.be.equal(3);
        expect(bodyTrs === null || bodyTrs === void 0 ? void 0 : bodyTrs.length).to.be.equal(2);
        expect(bodyTds === null || bodyTds === void 0 ? void 0 : bodyTds.length).to.be.equal(6);
    });
    it('header values', async () => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const columns = [
            {
                html: (value) => litHtml `${value} <div>test</div>`,
                property: 'fruit',
                otherProperties: [],
            },
        ];
        const litDatatableWithColumn = new LitDatatableWithColumnTest();
        await litDatatableWithColumn.init(basicConf, basicData, [], columns);
        await litDatatableWithColumn.elementUpdated();
        const { bodyTds, headThs } = litDatatableWithColumn;
        expect(bodyTds).to.be.not.equal(null);
        if (bodyTds) {
            expect((_a = bodyTds[0]) === null || _a === void 0 ? void 0 : _a.textContent).to.be.equal('apple');
            expect((_b = bodyTds[1]) === null || _b === void 0 ? void 0 : _b.textContent).to.be.equal('green');
            expect((_c = bodyTds[2]) === null || _c === void 0 ? void 0 : _c.textContent).to.be.equal('100gr');
            expect((_d = bodyTds[3]) === null || _d === void 0 ? void 0 : _d.textContent).to.be.equal('banana');
            expect((_e = bodyTds[4]) === null || _e === void 0 ? void 0 : _e.textContent).to.be.equal('yellow');
            expect((_f = bodyTds[5]) === null || _f === void 0 ? void 0 : _f.textContent).to.be.equal('140gr');
        }
        expect(headThs).to.be.not.equal(null);
        if (headThs) {
            expect((_g = headThs[0]) === null || _g === void 0 ? void 0 : _g.textContent).to.be.equal('Fruit test');
            expect((_h = headThs[1]) === null || _h === void 0 ? void 0 : _h.textContent).to.be.equal('Color');
            expect((_j = headThs[2]) === null || _j === void 0 ? void 0 : _j.textContent).to.be.equal('Weight');
        }
    });
    it('body values', async () => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const columns = [
            {
                html: (value) => litHtml `${value} <div>test</div>`,
                property: 'fruit',
                otherProperties: [],
            },
        ];
        const litDatatableWithColumn = new LitDatatableWithColumnTest();
        await litDatatableWithColumn.init(basicConf, basicData, columns, []);
        await litDatatableWithColumn.elementUpdated();
        const { bodyTds, headThs } = litDatatableWithColumn;
        expect(bodyTds).to.be.not.equal(null);
        if (bodyTds) {
            expect((_a = bodyTds[0]) === null || _a === void 0 ? void 0 : _a.textContent).to.be.equal('apple test');
            expect((_b = bodyTds[1]) === null || _b === void 0 ? void 0 : _b.textContent).to.be.equal('green');
            expect((_c = bodyTds[2]) === null || _c === void 0 ? void 0 : _c.textContent).to.be.equal('100gr');
            expect((_d = bodyTds[3]) === null || _d === void 0 ? void 0 : _d.textContent).to.be.equal('banana test');
            expect((_e = bodyTds[4]) === null || _e === void 0 ? void 0 : _e.textContent).to.be.equal('yellow');
            expect((_f = bodyTds[5]) === null || _f === void 0 ? void 0 : _f.textContent).to.be.equal('140gr');
        }
        expect(headThs).to.be.not.equal(null);
        if (headThs) {
            expect((_g = headThs[0]) === null || _g === void 0 ? void 0 : _g.textContent).to.be.equal('Fruit');
            expect((_h = headThs[1]) === null || _h === void 0 ? void 0 : _h.textContent).to.be.equal('Color');
            expect((_j = headThs[2]) === null || _j === void 0 ? void 0 : _j.textContent).to.be.equal('Weight');
        }
    });
    it('body other values', async () => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const columns = [
            {
                html: (value, otherValues) => litHtml `${value} <div>${otherValues.color}</div>`,
                property: 'fruit',
                otherProperties: ['color'],
            },
        ];
        const litDatatableWithColumn = new LitDatatableWithColumnTest();
        await litDatatableWithColumn.init(basicConf, basicData, columns, []);
        await litDatatableWithColumn.elementUpdated();
        const { bodyTds, headThs } = litDatatableWithColumn;
        expect(bodyTds).to.be.not.equal(null);
        if (bodyTds) {
            expect((_a = bodyTds[0]) === null || _a === void 0 ? void 0 : _a.textContent).to.be.equal('apple green');
            expect((_b = bodyTds[1]) === null || _b === void 0 ? void 0 : _b.textContent).to.be.equal('green');
            expect((_c = bodyTds[2]) === null || _c === void 0 ? void 0 : _c.textContent).to.be.equal('100gr');
            expect((_d = bodyTds[3]) === null || _d === void 0 ? void 0 : _d.textContent).to.be.equal('banana yellow');
            expect((_e = bodyTds[4]) === null || _e === void 0 ? void 0 : _e.textContent).to.be.equal('yellow');
            expect((_f = bodyTds[5]) === null || _f === void 0 ? void 0 : _f.textContent).to.be.equal('140gr');
        }
        expect(headThs).to.be.not.equal(null);
        if (headThs) {
            expect((_g = headThs[0]) === null || _g === void 0 ? void 0 : _g.textContent).to.be.equal('Fruit');
            expect((_h = headThs[1]) === null || _h === void 0 ? void 0 : _h.textContent).to.be.equal('Color');
            expect((_j = headThs[2]) === null || _j === void 0 ? void 0 : _j.textContent).to.be.equal('Weight');
        }
    });
    it('body values change conf', async () => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const columns = [
            {
                html: (value) => litHtml `${value} <div>test</div>`,
                property: 'fruit',
                otherProperties: [],
            },
        ];
        const litDatatableWithColumn = new LitDatatableWithColumnTest();
        await litDatatableWithColumn.init(basicConf, basicData, columns, []);
        await litDatatableWithColumn.elementUpdated();
        let bodyTds;
        let headThs;
        ({ bodyTds, headThs } = litDatatableWithColumn);
        expect(bodyTds).to.be.not.equal(null);
        if (bodyTds) {
            expect((_a = bodyTds[0]) === null || _a === void 0 ? void 0 : _a.textContent).to.be.equal('apple test');
            expect((_b = bodyTds[1]) === null || _b === void 0 ? void 0 : _b.textContent).to.be.equal('green');
            expect((_c = bodyTds[2]) === null || _c === void 0 ? void 0 : _c.textContent).to.be.equal('100gr');
            expect((_d = bodyTds[3]) === null || _d === void 0 ? void 0 : _d.textContent).to.be.equal('banana test');
            expect((_e = bodyTds[4]) === null || _e === void 0 ? void 0 : _e.textContent).to.be.equal('yellow');
            expect((_f = bodyTds[5]) === null || _f === void 0 ? void 0 : _f.textContent).to.be.equal('140gr');
        }
        expect(headThs).to.be.not.equal(null);
        if (headThs) {
            expect((_g = headThs[0]) === null || _g === void 0 ? void 0 : _g.textContent).to.be.equal('Fruit');
            expect((_h = headThs[1]) === null || _h === void 0 ? void 0 : _h.textContent).to.be.equal('Color');
            expect((_j = headThs[2]) === null || _j === void 0 ? void 0 : _j.textContent).to.be.equal('Weight');
        }
        const newConf = [
            { property: 'fruit', header: 'Fruit', hidden: false },
            { property: 'weight', header: 'Weight', hidden: false },
            { property: 'color', header: 'Color', hidden: false },
        ];
        litDatatableWithColumn.el.conf = newConf;
        await litDatatableWithColumn.elementUpdated();
        ({ bodyTds, headThs } = litDatatableWithColumn);
        expect(bodyTds).to.be.not.equal(null);
        if (bodyTds) {
            expect((_k = bodyTds[0]) === null || _k === void 0 ? void 0 : _k.textContent).to.be.equal('apple test');
            expect((_l = bodyTds[1]) === null || _l === void 0 ? void 0 : _l.textContent).to.be.equal('100gr');
            expect((_m = bodyTds[2]) === null || _m === void 0 ? void 0 : _m.textContent).to.be.equal('green');
            expect((_o = bodyTds[3]) === null || _o === void 0 ? void 0 : _o.textContent).to.be.equal('banana test');
            expect((_p = bodyTds[4]) === null || _p === void 0 ? void 0 : _p.textContent).to.be.equal('140gr');
            expect((_q = bodyTds[5]) === null || _q === void 0 ? void 0 : _q.textContent).to.be.equal('yellow');
        }
        expect(headThs).to.be.not.equal(null);
        if (headThs) {
            expect((_r = headThs[0]) === null || _r === void 0 ? void 0 : _r.textContent).to.be.equal('Fruit');
            expect((_s = headThs[1]) === null || _s === void 0 ? void 0 : _s.textContent).to.be.equal('Weight');
            expect((_t = headThs[2]) === null || _t === void 0 ? void 0 : _t.textContent).to.be.equal('Color');
        }
    });
    it('header styles', async () => {
        var _a;
        const columns = [
            {
                html: (value) => litHtml `${value} <div>test</div>`,
                property: 'fruit',
                otherProperties: [],
                columnStyle: 'background: red;',
            },
        ];
        const litDatatableWithColumn = new LitDatatableWithColumnTest();
        await litDatatableWithColumn.init(basicConf, basicData, [], columns);
        await litDatatableWithColumn.elementUpdated();
        const { headThs } = litDatatableWithColumn;
        expect(headThs).to.be.not.equal(null);
        if (headThs) {
            expect(/.*red.*/.test((_a = headThs[0]) === null || _a === void 0 ? void 0 : _a.style.background)).to.be.equal(true);
        }
    });
    it('body styles', async () => {
        var _a, _b;
        const columns = [
            {
                html: (value) => litHtml `${value} <div>test</div>`,
                property: 'fruit',
                otherProperties: [],
                columnStyle: 'background: red;',
            },
        ];
        const litDatatableWithColumn = new LitDatatableWithColumnTest();
        await litDatatableWithColumn.init(basicConf, basicData, columns, []);
        await litDatatableWithColumn.elementUpdated();
        const { bodyTds } = litDatatableWithColumn;
        expect(bodyTds).to.be.not.equal(null);
        if (bodyTds) {
            expect(/.*red.*/.test((_a = bodyTds[0]) === null || _a === void 0 ? void 0 : _a.style.background)).to.be.equal(true);
            expect(/.*red.*/.test((_b = bodyTds[3]) === null || _b === void 0 ? void 0 : _b.style.background)).to.be.equal(true);
        }
    });
    it('body values', async () => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const columns = [
            {
                html: null,
                property: 'fruit',
                otherProperties: [],
            },
        ];
        const litDatatableWithColumn = new LitDatatableWithColumnTest();
        await litDatatableWithColumn.init(basicConf, basicData, columns, []);
        await litDatatableWithColumn.elementUpdated();
        const { bodyTds, headThs } = litDatatableWithColumn;
        expect(bodyTds).to.be.not.equal(null);
        if (bodyTds) {
            expect((_a = bodyTds[0]) === null || _a === void 0 ? void 0 : _a.textContent).to.be.equal('apple');
            expect((_b = bodyTds[1]) === null || _b === void 0 ? void 0 : _b.textContent).to.be.equal('green');
            expect((_c = bodyTds[2]) === null || _c === void 0 ? void 0 : _c.textContent).to.be.equal('100gr');
            expect((_d = bodyTds[3]) === null || _d === void 0 ? void 0 : _d.textContent).to.be.equal('banana');
            expect((_e = bodyTds[4]) === null || _e === void 0 ? void 0 : _e.textContent).to.be.equal('yellow');
            expect((_f = bodyTds[5]) === null || _f === void 0 ? void 0 : _f.textContent).to.be.equal('140gr');
        }
        expect(headThs).to.be.not.equal(null);
        if (headThs) {
            expect((_g = headThs[0]) === null || _g === void 0 ? void 0 : _g.textContent).to.be.equal('Fruit');
            expect((_h = headThs[1]) === null || _h === void 0 ? void 0 : _h.textContent).to.be.equal('Color');
            expect((_j = headThs[2]) === null || _j === void 0 ? void 0 : _j.textContent).to.be.equal('Weight');
        }
    });
});
//# sourceMappingURL=lit-datatable-with-column.test.js.map