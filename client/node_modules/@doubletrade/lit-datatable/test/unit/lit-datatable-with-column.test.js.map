{"version":3,"file":"lit-datatable-with-column.test.js","sourceRoot":"","sources":["lit-datatable-with-column.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  fixture, html, expect, elementUpdated\n} from '@open-wc/testing';\nimport { TemplateResult, html as litHtml } from 'lit';\nimport type { LitDatatable, Conf } from '../../lit-datatable';\nimport '../../lit-datatable';\nimport '../../lit-datatable-column';\n\ninterface PropertyColumn {\n  property: string;\n  html: ((value: string, otherValues?: any) => TemplateResult) | null;\n  otherProperties: Array<string>;\n  columnStyle?: string;\n}\n\nclass LitDatatableWithColumnTest {\n  el!: LitDatatable;\n\n  async init(conf: Array<Conf>, data: Array<unknown>, columns: Array<PropertyColumn>, headers: Array<PropertyColumn>): Promise<LitDatatable> {\n    const litDatatable = html`\n      <lit-datatable .conf=\"${conf}\" .data=\"${data}\">\n        ${columns.map((column) => html`\n          <lit-datatable-column\n            .html=\"${column.html}\"\n            .property=\"${column.property}\"\n            .otherProperties=\"${column.otherProperties}\"\n            column\n            .columnStyle=\"${column.columnStyle || ''}\"\n          ></lit-datatable-column>\n        `)}\n        ${headers.map((header) => html`\n          <lit-datatable-column\n            .html=\"${header.html}\"\n            .property=\"${header.property}\"\n            .otherProperties=\"${header.otherProperties}\"\n            header\n            .columnStyle=\"${header.columnStyle || ''}\"\n          ></lit-datatable-column>\n        `)}\n      </lit-datatable>\n    `;\n    this.el = await fixture(litDatatable);\n    return this.elementUpdated();\n  }\n\n  elementUpdated(): Promise<LitDatatable> {\n    return elementUpdated(this.el);\n  }\n\n  get bodyTrs() {\n    if (this?.el?.shadowRoot) {\n      return this.el.shadowRoot.querySelectorAll<HTMLTableRowElement>('tbody tr');\n    }\n    return null;\n  }\n\n  get bodyTds() {\n    if (this?.el?.shadowRoot) {\n      return this.el.shadowRoot.querySelectorAll<HTMLTableDataCellElement>('tbody td');\n    }\n    return null;\n  }\n\n  get headTrs() {\n    if (this?.el?.shadowRoot) {\n      return this.el.shadowRoot.querySelectorAll<HTMLTableRowElement>('thead tr');\n    }\n    return null;\n  }\n\n  get headThs() {\n    if (this?.el?.shadowRoot) {\n      return this.el.shadowRoot.querySelectorAll<HTMLTableRowElement>('thead th');\n    }\n    return null;\n  }\n}\n\nconst basicData = [\n  { fruit: 'apple', color: 'green', weight: '100gr' },\n  { fruit: 'banana', color: 'yellow', weight: '140gr' },\n];\n\nconst basicConf: Array<Conf> = [\n  { property: 'fruit', header: 'Fruit', hidden: false },\n  { property: 'color', header: 'Color', hidden: false },\n  { property: 'weight', header: 'Weight', hidden: false },\n];\n\ndescribe('lit-datatable', () => {\n  it('counts', async () => {\n    const columns: Array<PropertyColumn> = [\n      {\n        html: (value) => litHtml`${value} test`,\n        property: 'fruit',\n        otherProperties: [],\n      },\n    ];\n    const litDatatableWithColumn = new LitDatatableWithColumnTest();\n    await litDatatableWithColumn.init(basicConf, basicData, columns, []);\n    await litDatatableWithColumn.elementUpdated();\n    const {\n      bodyTrs, bodyTds, headTrs, headThs,\n    } = litDatatableWithColumn;\n    expect(headTrs?.length).to.be.equal(1);\n    expect(headThs?.length).to.be.equal(3);\n    expect(bodyTrs?.length).to.be.equal(2);\n    expect(bodyTds?.length).to.be.equal(6);\n  });\n\n  it('header values', async () => {\n    const columns: Array<PropertyColumn> = [\n      {\n        html: (value) => litHtml`${value} <div>test</div>`,\n        property: 'fruit',\n        otherProperties: [],\n      },\n    ];\n    const litDatatableWithColumn = new LitDatatableWithColumnTest();\n    await litDatatableWithColumn.init(basicConf, basicData, [], columns);\n    await litDatatableWithColumn.elementUpdated();\n    const { bodyTds, headThs } = litDatatableWithColumn;\n    expect(bodyTds).to.be.not.equal(null);\n    if (bodyTds) {\n      expect(bodyTds[0]?.textContent).to.be.equal('apple');\n      expect(bodyTds[1]?.textContent).to.be.equal('green');\n      expect(bodyTds[2]?.textContent).to.be.equal('100gr');\n      expect(bodyTds[3]?.textContent).to.be.equal('banana');\n      expect(bodyTds[4]?.textContent).to.be.equal('yellow');\n      expect(bodyTds[5]?.textContent).to.be.equal('140gr');\n    }\n    expect(headThs).to.be.not.equal(null);\n    if (headThs) {\n      expect(headThs[0]?.textContent).to.be.equal('Fruit test');\n      expect(headThs[1]?.textContent).to.be.equal('Color');\n      expect(headThs[2]?.textContent).to.be.equal('Weight');\n    }\n  });\n\n  it('body values', async () => {\n    const columns: Array<PropertyColumn> = [\n      {\n        html: (value) => litHtml`${value} <div>test</div>`,\n        property: 'fruit',\n        otherProperties: [],\n      },\n    ];\n    const litDatatableWithColumn = new LitDatatableWithColumnTest();\n    await litDatatableWithColumn.init(basicConf, basicData, columns, []);\n    await litDatatableWithColumn.elementUpdated();\n    const { bodyTds, headThs } = litDatatableWithColumn;\n    expect(bodyTds).to.be.not.equal(null);\n    if (bodyTds) {\n      expect(bodyTds[0]?.textContent).to.be.equal('apple test');\n      expect(bodyTds[1]?.textContent).to.be.equal('green');\n      expect(bodyTds[2]?.textContent).to.be.equal('100gr');\n      expect(bodyTds[3]?.textContent).to.be.equal('banana test');\n      expect(bodyTds[4]?.textContent).to.be.equal('yellow');\n      expect(bodyTds[5]?.textContent).to.be.equal('140gr');\n    }\n    expect(headThs).to.be.not.equal(null);\n    if (headThs) {\n      expect(headThs[0]?.textContent).to.be.equal('Fruit');\n      expect(headThs[1]?.textContent).to.be.equal('Color');\n      expect(headThs[2]?.textContent).to.be.equal('Weight');\n    }\n  });\n\n  it('body other values', async () => {\n    const columns: Array<PropertyColumn> = [\n      {\n        html: (value, otherValues) => litHtml`${value} <div>${otherValues.color}</div>`,\n        property: 'fruit',\n        otherProperties: ['color'],\n      },\n    ];\n    const litDatatableWithColumn = new LitDatatableWithColumnTest();\n    await litDatatableWithColumn.init(basicConf, basicData, columns, []);\n    await litDatatableWithColumn.elementUpdated();\n    const { bodyTds, headThs } = litDatatableWithColumn;\n    expect(bodyTds).to.be.not.equal(null);\n    if (bodyTds) {\n      expect(bodyTds[0]?.textContent).to.be.equal('apple green');\n      expect(bodyTds[1]?.textContent).to.be.equal('green');\n      expect(bodyTds[2]?.textContent).to.be.equal('100gr');\n      expect(bodyTds[3]?.textContent).to.be.equal('banana yellow');\n      expect(bodyTds[4]?.textContent).to.be.equal('yellow');\n      expect(bodyTds[5]?.textContent).to.be.equal('140gr');\n    }\n    expect(headThs).to.be.not.equal(null);\n    if (headThs) {\n      expect(headThs[0]?.textContent).to.be.equal('Fruit');\n      expect(headThs[1]?.textContent).to.be.equal('Color');\n      expect(headThs[2]?.textContent).to.be.equal('Weight');\n    }\n  });\n\n  it('body values change conf', async () => {\n    const columns: Array<PropertyColumn> = [\n      {\n        html: (value) => litHtml`${value} <div>test</div>`,\n        property: 'fruit',\n        otherProperties: [],\n      },\n    ];\n    const litDatatableWithColumn = new LitDatatableWithColumnTest();\n    await litDatatableWithColumn.init(basicConf, basicData, columns, []);\n    await litDatatableWithColumn.elementUpdated();\n    let bodyTds;\n    let headThs;\n    ({ bodyTds, headThs } = litDatatableWithColumn);\n    expect(bodyTds).to.be.not.equal(null);\n    if (bodyTds) {\n      expect(bodyTds[0]?.textContent).to.be.equal('apple test');\n      expect(bodyTds[1]?.textContent).to.be.equal('green');\n      expect(bodyTds[2]?.textContent).to.be.equal('100gr');\n      expect(bodyTds[3]?.textContent).to.be.equal('banana test');\n      expect(bodyTds[4]?.textContent).to.be.equal('yellow');\n      expect(bodyTds[5]?.textContent).to.be.equal('140gr');\n    }\n    expect(headThs).to.be.not.equal(null);\n    if (headThs) {\n      expect(headThs[0]?.textContent).to.be.equal('Fruit');\n      expect(headThs[1]?.textContent).to.be.equal('Color');\n      expect(headThs[2]?.textContent).to.be.equal('Weight');\n    }\n\n    const newConf: Array<Conf> = [\n      { property: 'fruit', header: 'Fruit', hidden: false },\n      { property: 'weight', header: 'Weight', hidden: false },\n      { property: 'color', header: 'Color', hidden: false },\n    ];\n    litDatatableWithColumn.el.conf = newConf;\n    await litDatatableWithColumn.elementUpdated();\n\n    ({ bodyTds, headThs } = litDatatableWithColumn);\n    expect(bodyTds).to.be.not.equal(null);\n    if (bodyTds) {\n      expect(bodyTds[0]?.textContent).to.be.equal('apple test');\n      expect(bodyTds[1]?.textContent).to.be.equal('100gr');\n      expect(bodyTds[2]?.textContent).to.be.equal('green');\n      expect(bodyTds[3]?.textContent).to.be.equal('banana test');\n      expect(bodyTds[4]?.textContent).to.be.equal('140gr');\n      expect(bodyTds[5]?.textContent).to.be.equal('yellow');\n    }\n    expect(headThs).to.be.not.equal(null);\n    if (headThs) {\n      expect(headThs[0]?.textContent).to.be.equal('Fruit');\n      expect(headThs[1]?.textContent).to.be.equal('Weight');\n      expect(headThs[2]?.textContent).to.be.equal('Color');\n    }\n  });\n\n  it('header styles', async () => {\n    const columns: Array<PropertyColumn> = [\n      {\n        html: (value) => litHtml`${value} <div>test</div>`,\n        property: 'fruit',\n        otherProperties: [],\n        columnStyle: 'background: red;',\n      },\n    ];\n    const litDatatableWithColumn = new LitDatatableWithColumnTest();\n    await litDatatableWithColumn.init(basicConf, basicData, [], columns);\n    await litDatatableWithColumn.elementUpdated();\n    const { headThs } = litDatatableWithColumn;\n    expect(headThs).to.be.not.equal(null);\n    if (headThs) {\n      expect(/.*red.*/.test(headThs[0]?.style.background)).to.be.equal(true);\n    }\n  });\n\n  it('body styles', async () => {\n    const columns: Array<PropertyColumn> = [\n      {\n        html: (value) => litHtml`${value} <div>test</div>`,\n        property: 'fruit',\n        otherProperties: [],\n        columnStyle: 'background: red;',\n      },\n    ];\n    const litDatatableWithColumn = new LitDatatableWithColumnTest();\n    await litDatatableWithColumn.init(basicConf, basicData, columns, []);\n    await litDatatableWithColumn.elementUpdated();\n    const { bodyTds } = litDatatableWithColumn;\n    expect(bodyTds).to.be.not.equal(null);\n    if (bodyTds) {\n      expect(/.*red.*/.test(bodyTds[0]?.style.background)).to.be.equal(true);\n      expect(/.*red.*/.test(bodyTds[3]?.style.background)).to.be.equal(true);\n    }\n  });\n\n  it('body values', async () => {\n    const columns: Array<PropertyColumn> = [\n      {\n        html: null,\n        property: 'fruit',\n        otherProperties: [],\n      },\n    ];\n    const litDatatableWithColumn = new LitDatatableWithColumnTest();\n    await litDatatableWithColumn.init(basicConf, basicData, columns, []);\n    await litDatatableWithColumn.elementUpdated();\n    const { bodyTds, headThs } = litDatatableWithColumn;\n    expect(bodyTds).to.be.not.equal(null);\n    if (bodyTds) {\n      expect(bodyTds[0]?.textContent).to.be.equal('apple');\n      expect(bodyTds[1]?.textContent).to.be.equal('green');\n      expect(bodyTds[2]?.textContent).to.be.equal('100gr');\n      expect(bodyTds[3]?.textContent).to.be.equal('banana');\n      expect(bodyTds[4]?.textContent).to.be.equal('yellow');\n      expect(bodyTds[5]?.textContent).to.be.equal('140gr');\n    }\n    expect(headThs).to.be.not.equal(null);\n    if (headThs) {\n      expect(headThs[0]?.textContent).to.be.equal('Fruit');\n      expect(headThs[1]?.textContent).to.be.equal('Color');\n      expect(headThs[2]?.textContent).to.be.equal('Weight');\n    }\n  });\n});\n"]}